[{"/home/akhilkala/Desktop/Web/theropy/client/src/index.tsx":"1","/home/akhilkala/Desktop/Web/theropy/client/src/App.tsx":"2","/home/akhilkala/Desktop/Web/theropy/client/src/context/AuthContext.tsx":"3","/home/akhilkala/Desktop/Web/theropy/client/src/components/ErrorBoundary.tsx":"4","/home/akhilkala/Desktop/Web/theropy/client/src/utils/requests.ts":"5","/home/akhilkala/Desktop/Web/theropy/client/src/components/PrivateRoute.tsx":"6","/home/akhilkala/Desktop/Web/theropy/client/src/components/Animation.tsx":"7","/home/akhilkala/Desktop/Web/theropy/client/src/pages/Admin.tsx":"8","/home/akhilkala/Desktop/Web/theropy/client/src/pages/NotFound.tsx":"9","/home/akhilkala/Desktop/Web/theropy/client/src/pages/Teacher.tsx":"10","/home/akhilkala/Desktop/Web/theropy/client/src/pages/User.tsx":"11","/home/akhilkala/Desktop/Web/theropy/client/src/utils/utilities.ts":"12","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useFetch.ts":"13","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useInputState.ts":"14","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useConfirm.ts":"15","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useDocumentTitle.ts":"16","/home/akhilkala/Desktop/Web/theropy/client/src/pages/Landing.tsx":"17","/home/akhilkala/Desktop/Web/theropy/client/src/components/Input.tsx":"18","/home/akhilkala/Desktop/Web/theropy/client/src/components/Confirm.tsx":"19","/home/akhilkala/Desktop/Web/theropy/client/src/components/Feedback.tsx":"20","/home/akhilkala/Desktop/Web/theropy/client/src/components/Login.tsx":"21"},{"size":731,"mtime":1632260516420,"results":"22","hashOfConfig":"23"},{"size":971,"mtime":1632697946320,"results":"24","hashOfConfig":"23"},{"size":1734,"mtime":1632531593679,"results":"25","hashOfConfig":"23"},{"size":622,"mtime":1632069675324,"results":"26","hashOfConfig":"23"},{"size":1599,"mtime":1632876516490,"results":"27","hashOfConfig":"23"},{"size":1000,"mtime":1632526992762,"results":"28","hashOfConfig":"23"},{"size":1387,"mtime":1633077434990,"results":"29","hashOfConfig":"23"},{"size":14959,"mtime":1635329016611,"results":"30","hashOfConfig":"23"},{"size":426,"mtime":1631975588682,"results":"31","hashOfConfig":"23"},{"size":9362,"mtime":1634826438101,"results":"32","hashOfConfig":"23"},{"size":6312,"mtime":1635329653303,"results":"33","hashOfConfig":"23"},{"size":350,"mtime":1633078056950,"results":"34","hashOfConfig":"23"},{"size":689,"mtime":1631992039571,"results":"35","hashOfConfig":"23"},{"size":574,"mtime":1633163303666,"results":"36","hashOfConfig":"23"},{"size":612,"mtime":1631967058105,"results":"37","hashOfConfig":"23"},{"size":366,"mtime":1631966882082,"results":"38","hashOfConfig":"23"},{"size":15240,"mtime":1637696136308,"results":"39","hashOfConfig":"23"},{"size":1442,"mtime":1633163591828,"results":"40","hashOfConfig":"23"},{"size":696,"mtime":1632090876110,"results":"41","hashOfConfig":"23"},{"size":1755,"mtime":1634826438097,"results":"42","hashOfConfig":"23"},{"size":1921,"mtime":1632873588217,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"14b8l5p",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},"/home/akhilkala/Desktop/Web/theropy/client/src/index.tsx",[],["92","93"],"/home/akhilkala/Desktop/Web/theropy/client/src/App.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/context/AuthContext.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/ErrorBoundary.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/utils/requests.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/PrivateRoute.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Animation.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/Admin.tsx",["94"],"import React, { ReactElement } from \"react\";\nimport { Link, NavLink, Route, Switch } from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport Animation from \"../components/Animation\";\nimport Input from \"../components/Input\";\nimport useFetch from \"../hooks/useFetch\";\nimport useInputState from \"../hooks/useInputState\";\nimport ReactTooltip from \"react-tooltip\";\nimport cn from \"classnames\";\nimport { deleteCall, get, post } from \"../utils/requests\";\nimport { useConfirm } from \"../hooks/useConfirm\";\nimport Confrim from \"../components/Confirm\";\nimport useDocumentTitle from \"../hooks/useDocumentTitle\";\nimport { useAuth } from \"../context/AuthContext\";\nimport { User } from \"../utils/types\";\nimport Dropdown from \"react-dropdown\";\nimport \"react-dropdown/style.css\";\n\nconst dropdownOptions = [\n  { value: \"0\", label: \"Vision Therapy\" },\n  { value: \"1\", label: \"Speech Therapy\" },\n  { value: \"2\", label: \"Occupational Therapy\" },\n  { value: \"3\", label: \"Play & Art Therapy\" },\n  { value: \"4\", label: \"Counselling\" },\n  { value: \"5\", label: \"Clinical Psycology\" },\n  { value: \"6\", label: \"Special Education\" },\n  { value: \"7\", label: \"Vocational Training\" },\n];\n\nexport default function Admin(): ReactElement {\n  useDocumentTitle(\"Manonaya | Admin\");\n  const adminFetcher = useFetch(\"/admin/data\");\n  const { addToast } = useToasts();\n  const auth = useAuth();\n\n  if (adminFetcher.isLoading) {\n    return (\n      <div className=\"screen-center\">\n        <Animation animation=\"loading\" />\n      </div>\n    );\n  }\n\n  const createUser = async (\n    fullName: string,\n    username: string,\n    password: string,\n    confirmPassword: string,\n    isTeacher: boolean,\n    age: string,\n    gender: string,\n    therapies: any\n  ) => {\n    if (password !== confirmPassword)\n      return addToast(\"Passwords do not match\", { appearance: \"error\" });\n    try {\n      await post(\"/auth/register\", {\n        fullName,\n        username,\n        password,\n        isTeacher,\n        age,\n        gender,\n        therapies,\n      });\n    } catch (err: any) {\n      addToast(err.response.data.message, { appearance: \"error\" });\n      throw err;\n    }\n    adminFetcher.fetch(false);\n    addToast(\"User created successfully\", { appearance: \"success\" });\n  };\n\n  const deleteUser = async (id: string) => {\n    try {\n      const res = await deleteCall(`/admin/delete-user/${id}`);\n      addToast(res.message, { appearance: \"success\" });\n      adminFetcher.fetch(false);\n    } catch (err) {\n      addToast(\"Something went wrong\", { appearance: \"error\" });\n    }\n  };\n\n  return (\n    <div className=\"admin\">\n      <section>\n        <h1 className=\"heading\">\n          Admin Panel\n          <div onClick={auth?.logout}>\n            <i data-tip=\"Logout\" className=\"fas fa-sign-out-alt\"></i>\n            <ReactTooltip type=\"info\" place=\"right\" effect=\"solid\" />\n          </div>\n        </h1>\n        <nav>\n          <NavLink exact activeClassName=\"active-link\" to={`/`}>\n            User Actions\n          </NavLink>\n          <NavLink activeClassName=\"active-link\" to={`/patient-actions`}>\n            Patient Actions\n          </NavLink>\n          <NavLink activeClassName=\"active-link\" to={`/feedback`}>\n            Feedback\n          </NavLink>\n        </nav>\n      </section>\n      <main>\n        <Switch>\n          <Route\n            exact\n            path={`/`}\n            render={() => (\n              <AdminUserPanel\n                users={adminFetcher.data.users}\n                createUser={createUser}\n                deleteUser={deleteUser}\n              />\n            )}\n          />\n          <Route\n            path={`/feedback`}\n            render={() => (\n              <AdminFeedback feedback={adminFetcher.data.feedback} />\n            )}\n          />\n          <Route path={`/patient-actions`} render={() => <AdminActions />} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\ninterface AdminUserProps {\n  users: User[];\n  createUser: (\n    fullName: string,\n    username: string,\n    password: string,\n    confirmPassword: string,\n    isTeacher: boolean,\n    age: string,\n    gender: string,\n    therapies: any\n  ) => Promise<void>;\n  deleteUser: (username: string) => Promise<void>;\n}\n\nfunction AdminUserPanel({\n  users,\n  createUser,\n  deleteUser,\n}: AdminUserProps): ReactElement {\n  const search = useInputState();\n  const fullName = useInputState();\n  const username = useInputState();\n  const age = useInputState();\n  const gender = useInputState();\n  const password = useInputState();\n  const confirmPassword = useInputState();\n  const [isTeacher, setIsTeacher] = React.useState(false);\n  const { confirmed, options } = useConfirm();\n\n  const [therapies, setTherapies] = React.useState([\n    {\n      therapist: \"\",\n      therapy: \"0\",\n    },\n  ]);\n\n  const handleCreate = () => {\n    try {\n      createUser(\n        fullName.value,\n        username.value,\n        password.value,\n        confirmPassword.value,\n        isTeacher,\n        age.value,\n        gender.value,\n        therapies\n      );\n      username.handleReset();\n      password.handleReset();\n      confirmPassword.handleReset();\n      fullName.handleReset();\n      age.handleReset();\n      gender.handleReset();\n      setIsTeacher(false);\n      setTherapies([\n        {\n          therapist: \"\",\n          therapy: \"0\",\n        },\n      ]);\n    } catch (err) {}\n  };\n\n  const handleSetTherapist = (value: string, index: number) => {\n    setTherapies((prev) =>\n      prev.map((option: any, i: number) =>\n        i === index\n          ? {\n              ...option,\n              therapist: value,\n            }\n          : option\n      )\n    );\n  };\n\n  const handleDropdownChange = (dropdownOption: any, index: number) => {\n    setTherapies((prev) =>\n      prev.map((option: any, i: number) =>\n        i === index\n          ? {\n              ...option,\n              therapy: dropdownOption.value,\n            }\n          : option\n      )\n    );\n  };\n\n  return (\n    <div className=\"admin-user\">\n      <Confrim options={options} />\n      <aside className=\"list\">\n        <h1>User list</h1>\n        <Input\n          state={search}\n          placeholder=\"Search\"\n          icon={<i style={{ cursor: \"default\" }} className=\"fas fa-search\"></i>}\n        />\n        <div className=\"users\">\n          {users\n            .filter((user) => {\n              return user.username\n                .toLowerCase()\n                .includes(search.value.toLowerCase());\n            })\n            .filter((user) => {\n              return !user.isAdmin;\n            })\n            .map((user) => {\n              return (\n                <div className=\"user-card\">\n                  <div className=\"left\">\n                    <div className=\"name\">{user.username}</div>\n                    <div className={cn(\"role\", { therapist: user.isTeacher })}>\n                      {user.isTeacher ? \"Therapist\" : \"Patient\"}\n                    </div>\n                  </div>\n                  <div\n                    onClick={confirmed(\n                      () => deleteUser(user._id),\n                      `The account ${user.username} will be permanently deleted`\n                    )}\n                    className=\"delete\"\n                  >\n                    <i className=\"fa fa-trash\"></i>\n                  </div>\n                </div>\n              );\n            })}\n          {console.log(users)}\n        </div>\n      </aside>\n      <aside className=\"create\">\n        <h1>Create user</h1>\n        <div className=\"switch\">\n          <button\n            onClick={() => setIsTeacher(false)}\n            className={cn({ patient: !isTeacher })}\n          >\n            Patient\n          </button>\n          <button\n            onClick={() => setIsTeacher(true)}\n            className={cn({ therapist: isTeacher })}\n          >\n            Therapist\n          </button>\n        </div>\n        <Input state={fullName} placeholder=\"Full Name\" />\n        <Input state={username} placeholder=\"Username\" />\n        <Input state={password} placeholder=\"Password\" type=\"password\" />\n        <Input\n          state={confirmPassword}\n          placeholder=\"Confirm Password\"\n          type=\"password\"\n        />\n        {!isTeacher && (\n          <>\n            <Input state={age} placeholder=\"Age\" />\n            <Input state={gender} placeholder=\"Gender\" />\n            {[...Array(therapies.length)].map((_, i: number) => (\n              <div className=\"flex center\">\n                <input\n                  placeholder=\"Therapist Username\"\n                  className=\"therapist-input\"\n                  value={therapies[i].therapist}\n                  onChange={(e: any) => handleSetTherapist(e.target.value, i)}\n                />\n                <Dropdown\n                  options={dropdownOptions}\n                  value={dropdownOptions[0]}\n                  placeholder=\"Select an option\"\n                  className=\"dropdown\"\n                  onChange={(option: any) => handleDropdownChange(option, i)}\n                />\n                {i === therapies.length - 1 && (\n                  <div\n                    onClick={() =>\n                      setTherapies((prev: any) => [\n                        ...prev,\n                        {\n                          therapist: \"\",\n                          therapy: \"0\",\n                        },\n                      ])\n                    }\n                    className=\"add\"\n                  >\n                    <i className=\"fas fa-plus\"></i>\n                  </div>\n                )}\n              </div>\n            ))}\n          </>\n        )}\n        <button\n          onClick={handleCreate}\n          className={cn(\"submit\", { therapist: isTeacher })}\n        >\n          Create\n        </button>\n      </aside>\n    </div>\n  );\n}\n\ninterface AdminFeedbackProps {\n  feedback: [\n    {\n      message: string;\n      user: {\n        username: string;\n      };\n    }\n  ];\n}\n\nfunction AdminFeedback({ feedback }: AdminFeedbackProps): ReactElement {\n  const search = useInputState();\n\n  return (\n    <div className=\"admin-feedback\">\n      <Input\n        state={search}\n        placeholder=\"Search by username\"\n        icon={<i style={{ cursor: \"default\" }} className=\"fas fa-search\"></i>}\n      />\n      <div className=\"list\">\n        {feedback\n          .filter((details) =>\n            details.user.username\n              .toLowerCase()\n              .includes(search.value.toLowerCase())\n          )\n          .map((details) => {\n            return (\n              <div className=\"feedback-card\">\n                <div className=\"top\">\n                  <div className=\"name\">\n                    <span>Patient:</span> {details.user.username}\n                  </div>\n                </div>\n                <div className=\"message\">{details.message}</div>\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n}\n\nfunction AdminActions(): ReactElement {\n  const username = useInputState();\n  const username2 = useInputState();\n  const fileRef = React.useRef<HTMLInputElement>(null);\n  const [placeholder, setPlaceholder] = React.useState(\"No Report Chosen\");\n  const [loading, setLoading] = React.useState(false);\n  const [loading2, setLoading2] = React.useState(false);\n  const { addToast } = useToasts();\n\n  const [data, setData] = React.useState<any>(null);\n  const fullName = useInputState();\n  const age = useInputState();\n  const gender = useInputState();\n\n  const setFileName = (e: any) => {\n    setPlaceholder(e.target.files[0].name);\n  };\n\n  const handleUploadHistory = async (e: any) => {\n    e.preventDefault();\n\n    //@ts-ignore\n    const file = fileRef.current.files[0];\n\n    if (!username.value || !file)\n      return addToast(\"All fields are required\", { appearance: \"error\" });\n    if (file.type !== \"application/pdf\")\n      return addToast(\"File type not supported\", { appearance: \"error\" });\n\n    setLoading(true);\n    const data = new FormData();\n    data.append(\"file\", file);\n    data.append(\"username\", username.value);\n\n    try {\n      await post(\"/history\", data, {}, true);\n      username.handleReset();\n      return addToast(\"History updated successfully\", {\n        appearance: \"success\",\n      });\n    } catch (err: any) {\n      return addToast(err.response.data.message, { appearance: \"error\" });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const handleGetData = async (e: any) => {\n    e.preventDefault();\n    if (!username2.value) return;\n    setLoading2(true);\n    try {\n      const res = await get(`/admin/user-data/${username2.value}`);\n      console.log(res);\n      setData(res);\n\n      fullName.setValue(res.user.fullName);\n      age.setValue(res.age);\n      gender.setValue(res.gender);\n    } catch (err: any) {\n      return addToast(err.response.data.message, { appearance: \"error\" });\n    } finally {\n      setLoading2(false);\n    }\n  };\n\n  const handleUpdate = async () => {\n    try {\n      await post(\"/update-data\", {\n        username: username2.value,\n        fullName: fullName.value,\n        age: age.value,\n        gender: gender.value,\n      });\n      addToast(\"Updated successfully\", { appearance: \"success\" });\n    } catch (err) {\n      addToast(\"Something went wrong\", { appearance: \"error\" });\n    }\n  };\n\n  return (\n    <div className=\"admin-actions\">\n      <section className=\"action\">\n        <h2>Upload History</h2>\n        <div className=\"body\">\n          <Input state={username} placeholder=\"Username\" />\n          <div className=\"file\">\n            <input\n              style={{ display: \"none\" }}\n              type=\"file\"\n              name=\"report\"\n              id=\"report\"\n              ref={fileRef}\n              onChange={setFileName}\n            />\n            <div className=\"name\">{placeholder}</div>\n            <label htmlFor=\"report\" className=\"btn\">\n              Upload\n            </label>\n          </div>\n          <button\n            disabled={loading}\n            onClick={handleUploadHistory}\n            className=\"btn\"\n          >\n            Submit\n          </button>\n        </div>\n      </section>\n      <section className=\"action\">\n        <h2>Get User Data</h2>\n        <div className=\"body\">\n          <Input state={username2} placeholder=\"Username\" />\n          <button\n            onClick={handleGetData}\n            disabled={loading2}\n            className=\"btn btn--2\"\n          >\n            Submit\n          </button>\n        </div>\n        {!!data && (\n          <>\n            <div className=\"inputs\">\n              <Input\n                state={fullName}\n                placeholder=\"Full Name\"\n                label=\"Full Name\"\n              />\n              <Input state={age} placeholder=\"Age\" label=\"Age\" />\n              <Input state={gender} placeholder=\"Gender\" label=\"Gender\" />\n            </div>\n            <button onClick={handleUpdate} className=\"btn btn--alt\">\n              Update\n            </button>\n          </>\n        )}\n      </section>\n    </div>\n  );\n}\n","/home/akhilkala/Desktop/Web/theropy/client/src/pages/NotFound.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/Teacher.tsx",["95"],"import React, { ReactElement } from 'react';\nimport { NavLink, Route, Switch } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport uploadImg from '../assets/upload.png';\nimport Input from '../components/Input';\nimport useInputState from '../hooks/useInputState';\nimport Dropdown from 'react-dropdown';\nimport 'react-dropdown/style.css';\nimport { useToasts } from 'react-toast-notifications';\nimport { get, post } from '../utils/requests';\nimport Animation from '../components/Animation';\nimport useDocumentTitle from '../hooks/useDocumentTitle';\nimport { getTherapy } from '../utils/utilities';\n\nconst options = [\n  { value: '0', label: 'Vision Therapy' },\n  { value: '1', label: 'Speech Therapy' },\n  { value: '2', label: 'Occupational Therapy' },\n  { value: '3', label: 'Play & Art Therapy' },\n  { value: '4', label: 'Counselling' },\n  { value: '5', label: 'Clinical Psycology' },\n  { value: '6', label: 'Special Education' },\n  { value: '7', label: 'Vocational Training' },\n];\n\nexport default function Teacher(): ReactElement {\n  useDocumentTitle('Manonaya | Therapist Panel');\n  const auth = useAuth();\n  return (\n    <div className=\"teacher\">\n      <div className=\"top\">\n        <h1>Greetings, {auth?.user?.username}</h1>\n        <button onClick={auth?.logout} className=\"btn\">\n          Logout <i className=\"fas fa-sign-in-alt\"></i>\n        </button>\n      </div>\n      <nav>\n        <NavLink exact to=\"/\" activeClassName=\"active-link\">\n          Patient Data\n        </NavLink>\n        <NavLink to=\"/upload-report\" activeClassName=\"active-link\">\n          Upload Report\n        </NavLink>\n      </nav>\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={PatientData} />\n          <Route path=\"/upload-report\" component={UploadReport} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\nconst DEFAULT_OPTION = {\n  value: '0',\n  label: 'Vision Therapy',\n};\n\nconst DEFAULT_PLACEHOLDER = 'No Report Chosen';\n\nfunction UploadReport(): ReactElement {\n  const username = useInputState();\n  const fileRef = React.useRef<HTMLInputElement>(null);\n  const [placeholder, setPlaceholder] = React.useState(DEFAULT_PLACEHOLDER);\n  const [option, setOption] = React.useState(DEFAULT_OPTION);\n  const [loading, setLoading] = React.useState(false);\n  const { addToast } = useToasts();\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    //@ts-ignore\n    const file = fileRef.current.files[0];\n\n    if (!username.value || !file)\n      return addToast('All fields are required', { appearance: 'error' });\n    if (file.type !== 'application/pdf')\n      return addToast('File type not supported', { appearance: 'error' });\n\n    setLoading(true);\n    const data = new FormData();\n    data.append('file', file);\n    data.append('username', username.value);\n    data.append('therapy', option.value);\n\n    try {\n      await post('/upload-report', data, {}, true);\n      username.handleReset();\n      return addToast('File uploaded successfully', { appearance: 'success' });\n    } catch (err: any) {\n      return addToast(err.response.data.message, { appearance: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const setFileName = (e: any) => {\n    setPlaceholder(e.target.files[0].name);\n  };\n\n  const handleSelect = (option: any) => {\n    setOption(option);\n  };\n\n  return (\n    <div className=\"upload-report\">\n      <form onSubmit={handleSubmit} className=\"left\">\n        <h1>Upload a Patient Report</h1>\n        <Input state={username} placeholder=\"Patient Username\" />\n        <Dropdown\n          options={options}\n          value={option}\n          placeholder=\"Select an option\"\n          className=\"dropdown\"\n          onChange={handleSelect}\n        />\n        <div className=\"file\">\n          <input\n            style={{ display: 'none' }}\n            type=\"file\"\n            name=\"report\"\n            id=\"report\"\n            ref={fileRef}\n            onChange={setFileName}\n          />\n          <div className=\"name\">{placeholder}</div>\n          <label htmlFor=\"report\" className=\"btn\">\n            Upload\n          </label>\n        </div>\n        <button disabled={loading} className=\"btn\">\n          Submit\n        </button>\n      </form>\n      <div className=\"right\">\n        <img src={uploadImg} alt=\"Upload\" />\n      </div>\n    </div>\n  );\n}\n\nfunction PatientData(): ReactElement {\n  const username = useInputState();\n  const [loading, setLoading] = React.useState(false);\n  const { addToast } = useToasts();\n  const [data, setData] = React.useState<any>(null);\n  const [therapists, setTherapists] = React.useState<any>([]);\n\n  const [history, setHistory] = React.useState<any>(null);\n\n  React.useEffect(() => {\n    if (!data) return;\n    setHistory(getFormattedUserHistory()[0]);\n  }, [data]);\n\n  const handleSearch = async () => {\n    try {\n      setLoading(true);\n      if (!username.value) return addToast('Username is required', { appearance: 'error' });\n\n      const res = await get(`/user-data/${username.value}`);\n\n      res.therapies.forEach(async (item: any) => {\n        const therapies = await get(`/therapist-data/${item.therapist}`);\n        therapies.option = options[item.therapy].label;\n        setTherapists((prev: any) => [...prev, therapies]);\n      });\n\n      setData(res);\n    } catch (err: any) {\n      addToast(err.response.data.message, { appearance: 'error' });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const getFormattedUserHistory = () => {\n    if (!data) return [];\n    return data?.history.map((history: any) => ({\n      label: history.date.split('T')[0],\n      value: history.fileUrl,\n    }));\n  };\n\n  const handleHistoryChange = (option: any) => setHistory(option);\n\n  return (\n    <div className=\"patinet-data\">\n      <div className=\"top\">\n        <Input\n          state={username}\n          placeholder=\"Search for username\"\n          icon={<i style={{ cursor: 'default' }} className=\"fas fa-search\"></i>}\n        />\n        <button disabled={loading} onClick={handleSearch} className=\"btn\">\n          Search\n        </button>\n      </div>\n      {loading && <Animation animation=\"loading2\" />}\n      {!!data ? (\n        <main className=\"main\">\n          <aside className=\"left\">\n            <Animation width={100} height={100} animation=\"user\" loop={false} />{' '}\n            <div className=\"item-container\">\n              <div className=\"item container-item\">\n                <h4>Full Name:</h4>\n                {data?.user?.fullName}\n              </div>\n              <div className=\"item container-item\">\n                <h4>Username:</h4>\n                {data?.user?.username}\n              </div>\n              <div className=\"item container-item\">\n                <h4>Age:</h4>\n                {data?.age}\n              </div>\n              <div className=\"item container-item\">\n                <h4>Gender:</h4>\n                {data?.gender}\n              </div>\n            </div>\n            <div className=\"item item--alt\">\n              <h4>Therapies needed:</h4>\n              <br />\n              <div className=\"sub-items\">\n                {therapists?.map((therapy: any) => (\n                  <div className=\"sub-item\">\n                    <span>{therapy.option}</span>\n                    <br /> <h5>Faculty:</h5> {therapy.fullName}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div className=\"history\">\n              <h4>User History</h4>\n              <div className=\"flex\">\n                <Dropdown\n                  options={getFormattedUserHistory()}\n                  value={getFormattedUserHistory()[0]}\n                  placeholder=\"Select an option\"\n                  className=\"dropdown\"\n                  onChange={handleHistoryChange}\n                />\n                <a target=\"_blank\" rel=\"noreferrer noopener\" href={history?.value} className=\"btn\">\n                  View\n                </a>\n              </div>\n            </div>\n          </aside>\n          <aside>\n            <section>\n              <h4>User Reports</h4>\n              <Dropdown\n                options={[...options, { value: '8', label: 'No Filter' }]}\n                value={{ value: '8', label: 'No Filter' }}\n                placeholder=\"Select an option\"\n                className=\"dropdown\"\n              />\n              <div className=\"cards\">\n                {data?.report\n                  .filter((report: any) => {\n                    return true;\n                  })\n                  .map((report: any) => (\n                    <div className=\"report-card\">\n                      <div className=\"left\">\n                        <h4>\n                          <span>{getTherapy(report.therapy)}</span> - {report.therapist.fullName}\n                        </h4>\n                        <span>{`(${report.date.split('T')[0]})`}</span>\n                      </div>\n                      <a href={report.fileUrl} target=\"_blank\" rel=\"noreferrer noopener\">\n                        <i className=\"fa fa-eye\"></i>\n                      </a>\n                    </div>\n                  ))}\n              </div>\n            </section>\n          </aside>\n        </main>\n      ) : (\n        <div className=\"no-data\">\n          <h3>Search for a user</h3>\n          <div className=\"no-data-img\"></div>\n        </div>\n      )}\n    </div>\n  );\n}\n","/home/akhilkala/Desktop/Web/theropy/client/src/pages/User.tsx",["96"],"import React, { ReactElement } from \"react\";\nimport { NavLink, Route, Switch } from \"react-router-dom\";\nimport Animation from \"../components/Animation\";\nimport Feedback from \"../components/Feedback\";\nimport Input from \"../components/Input\";\nimport { useAuth } from \"../context/AuthContext\";\nimport useDocumentTitle from \"../hooks/useDocumentTitle\";\nimport useFetch from \"../hooks/useFetch\";\nimport useInputState from \"../hooks/useInputState\";\nimport { getTherapy } from \"../utils/utilities\";\nimport Dropdown from \"react-dropdown\";\nimport { get } from \"../utils/requests\";\nimport \"react-dropdown/style.css\";\n\nexport default function User(): ReactElement {\n  const auth = useAuth();\n  useDocumentTitle(`Manonaya | ${auth?.user?.username}`);\n  const [feedbackOpen, setFeedbackOpen] = React.useState(false);\n  return (\n    <div className=\"user\">\n      <Feedback\n        open={feedbackOpen}\n        handleClose={() => setFeedbackOpen(false)}\n      />\n      <div className=\"top\">\n        <h1>Greetings, {auth?.user?.fullName.split(\" \")[0]}</h1>\n        <div className=\"right\">\n          <button onClick={() => setFeedbackOpen(true)} className=\"btn\">\n            Give Feedback\n          </button>\n          <button onClick={auth?.logout} className=\"btn logout\">\n            Logout <i className=\"fas fa-sign-in-alt\"></i>\n          </button>\n        </div>\n      </div>\n      <nav>\n        <NavLink exact to=\"/\" activeClassName=\"active-link\">\n          Your Data\n        </NavLink>\n        <NavLink to=\"/user-reports\" activeClassName=\"active-link\">\n          Your Reports\n        </NavLink>\n      </nav>\n      <main>\n        <Switch>\n          <Route exact path=\"/\" component={UserData} />\n          <Route path=\"/user-reports\" component={UserReports} />\n        </Switch>\n      </main>\n    </div>\n  );\n}\nconst options = [\n  { value: \"0\", label: \"Vision Therapy\" },\n  { value: \"1\", label: \"Speech Therapy\" },\n  { value: \"2\", label: \"Occupational Therapy\" },\n  { value: \"3\", label: \"Play & Art Therapy\" },\n  { value: \"4\", label: \"Counselling\" },\n  { value: \"5\", label: \"Clinical Psycology\" },\n  { value: \"6\", label: \"Special Education\" },\n  { value: \"7\", label: \"Vocational Training\" },\n];\n\nfunction UserData(): ReactElement {\n  const auth = useAuth();\n  const [history, setHistory] = React.useState<any>(null);\n  const [therapists, setTherapists] = React.useState<any>([]);\n\n  React.useEffect(() => {\n    setHistory(getFormattedUserHistory()[0]);\n\n    const getTherapists = async () => {\n      auth?.user?.patient?.therapies.forEach(async (item: any) => {\n        const therapies = await get(`/therapist-data/${item.therapist}`);\n        therapies.option = options[item.therapy].label;\n        console.log(\"INDIE\", therapies);\n        setTherapists((prev: any) => [...prev, therapies]);\n      });\n    };\n    getTherapists();\n  }, []);\n\n  console.log(\"Therapists\", therapists);\n\n  const getFormattedUserHistory = () => {\n    return auth?.user?.patient.history.map((history: any) => ({\n      label: history.date.split(\"T\")[0],\n      value: history.fileUrl,\n    }));\n  };\n\n  const handleHistoryChange = (option: any) => setHistory(option);\n  console.log(\"User\", auth?.user?.patient);\n\n  return (\n    <div className=\"user-data\">\n      <Animation animation=\"user\" loop={false} width={200} height={200} />\n      <div className=\"item\">\n        <h4>Full Name:</h4>\n        {auth?.user?.fullName}\n      </div>\n      <div className=\"item\">\n        <h4>Username:</h4>\n        {auth?.user?.username}\n      </div>\n      <div className=\"item\">\n        <h4>Age:</h4>\n        {auth?.user?.patient.age}\n      </div>\n      <div className=\"item\">\n        <h4>Gender:</h4>\n        {auth?.user?.patient.gender}\n      </div>\n      {!!getFormattedUserHistory().length && (\n        <div className=\"history\">\n          <h4>History:</h4>\n          <div className=\"flex\">\n            <Dropdown\n              options={getFormattedUserHistory()}\n              value={getFormattedUserHistory()[0]}\n              placeholder=\"Select an option\"\n              className=\"dropdown\"\n              onChange={handleHistoryChange}\n            />\n            <a\n              target=\"_blank\"\n              rel=\"noreferrer noopener\"\n              href={history?.value}\n              className=\"btn\"\n            >\n              View\n            </a>\n          </div>\n        </div>\n      )}\n      <div className=\"item item--alt\">\n        <h4>Therapies needed:</h4>\n        <br />\n        <div className=\"sub-items\">\n          {therapists?.map((therapy: any) => (\n            <div className=\"sub-item\">\n              <span>{therapy.option}</span>\n              <br /> <h5>Faculty:</h5> {therapy.fullName}\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction UserReports(): ReactElement {\n  const search = useInputState();\n  const reportFetcher = useFetch(\"/reports\");\n\n  return (\n    <div className=\"user-reports\">\n      <h1>Reports</h1>\n      <Input\n        state={search}\n        placeholder=\"Search for Therapy / Therapist\"\n        icon={<i style={{ cursor: \"default\" }} className=\"fas fa-search\"></i>}\n      />\n      <main>\n        {reportFetcher.isLoading && <Animation animation=\"loading3\" />}\n        {!!reportFetcher.data && (\n          <div className=\"cards\">\n            {reportFetcher.data\n              .filter((report: any) => {\n                const searchTerm =\n                  report.therapist.fullName + \" \" + getTherapy(report.therapy);\n                return searchTerm\n                  .toLowerCase()\n                  .includes(search.value.toLowerCase());\n              })\n              .map((report: any) => (\n                <div className=\"report-card\">\n                  <div className=\"left\">\n                    <h4>\n                      <span>{getTherapy(report.therapy)}</span> -{\" \"}\n                      {report.therapist.fullName}\n                    </h4>\n                    <span>{`(${report.date.split(\"T\")[0]})`}</span>\n                  </div>\n                  <a\n                    href={report.fileUrl}\n                    target=\"_blank\"\n                    rel=\"noreferrer noopener\"\n                  >\n                    <i className=\"fa fa-eye\"></i>\n                  </a>\n                </div>\n              ))}\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n","/home/akhilkala/Desktop/Web/theropy/client/src/utils/utilities.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useFetch.ts",["97"],"import { useEffect, useState } from \"react\";\nimport { get } from \"../utils/requests\";\n\nconst useFetch = (url: string, lazy = false) => {\n  const [isLoading, setIsLoading] = useState(!lazy);\n  const [error, setError] = useState<any>(null);\n  const [data, setData] = useState<any>(null);\n\n  const fetch = (loading = true) => {\n    setIsLoading(loading);\n    get(url)\n      .then((data: any) => {\n        setData(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setError(err);\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (!lazy) {\n      fetch();\n    }\n  }, []);\n\n  return { isLoading, error, data, fetch };\n};\n\nexport default useFetch;\n","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useInputState.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useConfirm.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useDocumentTitle.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/Landing.tsx",["98"],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Input.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Confirm.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Feedback.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Login.tsx",[],["99","100"],{"ruleId":"101","replacedBy":"102"},{"ruleId":"103","replacedBy":"104"},{"ruleId":"105","severity":1,"message":"106","line":2,"column":10,"nodeType":"107","messageId":"108","endLine":2,"endColumn":14},{"ruleId":"109","severity":1,"message":"110","line":155,"column":6,"nodeType":"111","endLine":155,"endColumn":12,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":81,"column":6,"nodeType":"111","endLine":81,"endColumn":8,"suggestions":"114"},{"ruleId":"109","severity":1,"message":"115","line":26,"column":6,"nodeType":"111","endLine":26,"endColumn":8,"suggestions":"116"},{"ruleId":"117","severity":1,"message":"118","line":17,"column":33,"nodeType":"119","messageId":"120","endLine":17,"endColumn":42},{"ruleId":"101","replacedBy":"121"},{"ruleId":"103","replacedBy":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"@typescript-eslint/no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'getFormattedUserHistory'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook React.useEffect has missing dependencies: 'auth?.user?.patient?.therapies' and 'getFormattedUserHistory'. Either include them or remove the dependency array.",["126"],"React Hook useEffect has missing dependencies: 'fetch' and 'lazy'. Either include them or remove the dependency array.",["127"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected",["123"],["124"],"no-global-assign","no-unsafe-negation",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [data, getFormattedUserHistory]",{"range":"134","text":"135"},"Update the dependencies array to be: [auth?.user?.patient?.therapies, getFormattedUserHistory]",{"range":"136","text":"137"},"Update the dependencies array to be: [fetch, lazy]",{"range":"138","text":"139"},[4790,4796],"[data, getFormattedUserHistory]",[2821,2823],"[auth?.user?.patient?.therapies, getFormattedUserHistory]",[610,612],"[fetch, lazy]"]