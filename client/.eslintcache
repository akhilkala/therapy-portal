[{"/home/akhilkala/Desktop/Web/my-app/src/index.tsx":"1","/home/akhilkala/Desktop/Web/my-app/src/App.tsx":"2","/home/akhilkala/Desktop/Web/theropy/client/src/index.tsx":"3","/home/akhilkala/Desktop/Web/theropy/client/src/App.tsx":"4","/home/akhilkala/Desktop/Web/theropy/client/src/components/Animation.tsx":"5","/home/akhilkala/Desktop/Web/theropy/client/src/components/ErrorBoundary.tsx":"6","/home/akhilkala/Desktop/Web/theropy/client/src/pages/NotFound.tsx":"7","/home/akhilkala/Desktop/Web/theropy/client/src/pages/Landing.tsx":"8","/home/akhilkala/Desktop/Web/theropy/client/src/context/AuthContext.tsx":"9","/home/akhilkala/Desktop/Web/theropy/client/src/utils/requests.ts":"10","/home/akhilkala/Desktop/Web/theropy/client/src/pages/Home.tsx":"11","/home/akhilkala/Desktop/Web/theropy/client/src/components/PrivateRoute.tsx":"12","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useDocumentTitle.ts":"13","/home/akhilkala/Desktop/Web/theropy/client/src/pages/Admin.tsx":"14","/home/akhilkala/Desktop/Web/theropy/client/src/components/Input.tsx":"15","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useInputState.ts":"16","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useFetch.ts":"17","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useConfirm.ts":"18","/home/akhilkala/Desktop/Web/theropy/client/src/components/Confirm.tsx":"19","/home/akhilkala/Desktop/Web/theropy/client/src/components/Login.tsx":"20"},{"size":220,"mtime":1608013198903,"results":"21","hashOfConfig":"22"},{"size":324,"mtime":1608013657938,"results":"23","hashOfConfig":"22"},{"size":562,"mtime":1632089058284,"results":"24","hashOfConfig":"25"},{"size":927,"mtime":1632259789979,"results":"26","hashOfConfig":"25"},{"size":1137,"mtime":1632259836293,"results":"27","hashOfConfig":"25"},{"size":622,"mtime":1632069675324,"results":"28","hashOfConfig":"25"},{"size":426,"mtime":1631975588682,"results":"29","hashOfConfig":"25"},{"size":510,"mtime":1632255744079,"results":"30","hashOfConfig":"25"},{"size":1835,"mtime":1632258408166,"results":"31","hashOfConfig":"25"},{"size":1132,"mtime":1632000031671,"results":"32","hashOfConfig":"25"},{"size":150,"mtime":1632258343851,"results":"33","hashOfConfig":"25"},{"size":848,"mtime":1632168401312,"results":"34","hashOfConfig":"25"},{"size":366,"mtime":1631966882082,"results":"35","hashOfConfig":"25"},{"size":7476,"mtime":1632138079322,"results":"36","hashOfConfig":"25"},{"size":1180,"mtime":1632256452913,"results":"37","hashOfConfig":"25"},{"size":506,"mtime":1631966691195,"results":"38","hashOfConfig":"25"},{"size":689,"mtime":1631992039571,"results":"39","hashOfConfig":"25"},{"size":612,"mtime":1631967058105,"results":"40","hashOfConfig":"25"},{"size":696,"mtime":1632090876110,"results":"41","hashOfConfig":"25"},{"size":1355,"mtime":1632258579555,"results":"42","hashOfConfig":"25"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"45"},"13qawev",{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"14b8l5p",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/akhilkala/Desktop/Web/my-app/src/index.tsx",[],["87","88"],"/home/akhilkala/Desktop/Web/my-app/src/App.tsx",["89"],"/home/akhilkala/Desktop/Web/theropy/client/src/index.tsx",[],["90","91"],"/home/akhilkala/Desktop/Web/theropy/client/src/App.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Animation.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/ErrorBoundary.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/NotFound.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/Landing.tsx",["92"],"/home/akhilkala/Desktop/Web/theropy/client/src/context/AuthContext.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/utils/requests.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/Home.tsx",["93"],"/home/akhilkala/Desktop/Web/theropy/client/src/components/PrivateRoute.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useDocumentTitle.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/pages/Admin.tsx",["94"],"import React, { ReactElement } from \"react\";\nimport {\n  Link,\n  NavLink,\n  Route,\n  RouteComponentProps,\n  Switch,\n} from \"react-router-dom\";\nimport { useToasts } from \"react-toast-notifications\";\nimport Animation from \"../components/Animation\";\nimport Input from \"../components/Input\";\nimport useFetch from \"../hooks/useFetch\";\nimport useInputState from \"../hooks/useInputState\";\nimport ReactTooltip from \"react-tooltip\";\nimport cn from \"classnames\";\nimport { deleteCall, post } from \"../utils/requests\";\nimport { useConfirm } from \"../hooks/useConfirm\";\nimport Confrim from \"../components/Confirm\";\n\nexport default function Admin({ match }: RouteComponentProps): ReactElement {\n  const adminFetcher = useFetch(\"/admin/data\");\n  const { addToast } = useToasts();\n\n  if (adminFetcher.isLoading) {\n    return (\n      <div className=\"screen-center\">\n        <Animation animation=\"loading\" />\n      </div>\n    );\n  }\n\n  const createUser = async (\n    username: string,\n    password: string,\n    confirmPassword: string,\n    isTeacher: boolean\n  ) => {\n    if (password !== confirmPassword)\n      return addToast(\"Passwords do not match\", { appearance: \"error\" });\n    try {\n      await post(\"/auth/register\", { username, password, isTeacher });\n    } catch (err: any) {\n      return addToast(err.response.data.message, { appearance: \"error\" });\n    }\n    adminFetcher.fetch(false);\n    addToast(\"User created successfully\", { appearance: \"success\" });\n  };\n\n  const deleteUser = async (username: string) => {\n    try {\n      const res = await deleteCall(`/admin/delete-user/${username}`);\n      addToast(res.message, { appearance: \"success\" });\n      adminFetcher.fetch(false);\n    } catch (err) {\n      addToast(\"Something went wrong\", { appearance: \"error\" });\n    }\n  };\n\n  return (\n    <div className=\"admin\">\n      <section>\n        <h1 className=\"heading\">\n          Admin Panel\n          <Link to=\"/\">\n            <i data-tip=\"Exit Admin Panel\" className=\"fas fa-sign-out-alt\"></i>\n            <ReactTooltip type=\"info\" place=\"left\" effect=\"solid\" />\n          </Link>\n        </h1>\n        <nav>\n          <NavLink exact activeClassName=\"active-link\" to={`${match.path}`}>\n            User Actions\n          </NavLink>\n          <NavLink\n            activeClassName=\"active-link\"\n            to={`${match.path}/patient-actions`}\n          >\n            Patient Actions\n          </NavLink>\n          <NavLink activeClassName=\"active-link\" to={`${match.path}/feedback`}>\n            Feedback\n          </NavLink>\n        </nav>\n      </section>\n      <main>\n        <Switch>\n          <Route\n            exact\n            path={`${match.path}`}\n            render={() => (\n              <AdminUserPanel\n                users={adminFetcher.data.users}\n                createUser={createUser}\n                deleteUser={deleteUser}\n              />\n            )}\n          />\n          <Route\n            path={`${match.path}/feedback`}\n            render={() => (\n              <AdminFeedback\n              // feedback={adminFetcher.data.users}\n              />\n            )}\n          />\n        </Switch>\n      </main>\n    </div>\n  );\n}\n\ninterface AdminUserProps {\n  users: [\n    {\n      username: string;\n      isTeacher: boolean;\n      isAdmin: boolean;\n    }\n  ];\n  createUser: (\n    username: string,\n    password: string,\n    confirmPassword: string,\n    isTeacher: boolean\n  ) => Promise<void>;\n  deleteUser: (username: string) => Promise<void>;\n}\n\nfunction AdminUserPanel({\n  users,\n  createUser,\n  deleteUser,\n}: AdminUserProps): ReactElement {\n  const search = useInputState();\n  const username = useInputState();\n  const password = useInputState();\n  const confirmPassword = useInputState();\n  const [isTeacher, setIsTeacher] = React.useState(false);\n  const { confirmed, options } = useConfirm();\n\n  const handleCreate = () => {\n    createUser(\n      username.value,\n      password.value,\n      confirmPassword.value,\n      isTeacher\n    );\n    username.handleReset();\n    password.handleReset();\n    confirmPassword.handleReset();\n    setIsTeacher(false);\n  };\n\n  return (\n    <div className=\"admin-user\">\n      <Confrim options={options} />\n      <aside className=\"list\">\n        <h1>User list</h1>\n        <Input\n          state={search}\n          placeholder=\"Search\"\n          icon={<i style={{ cursor: \"default\" }} className=\"fas fa-search\"></i>}\n        />\n        <div className=\"users\">\n          {users\n            .filter((user) => {\n              return user.username\n                .toLowerCase()\n                .includes(search.value.toLowerCase());\n            })\n            .filter((user) => {\n              return !user.isAdmin;\n            })\n            .map((user) => {\n              return (\n                <div className=\"user-card\">\n                  <div className=\"left\">\n                    <div className=\"name\">{user.username}</div>\n                    <div className={cn(\"role\", { therapist: user.isTeacher })}>\n                      {user.isTeacher ? \"Therapist\" : \"Patient\"}\n                    </div>\n                  </div>\n                  <div\n                    onClick={confirmed(\n                      () => deleteUser(user.username),\n                      `The account ${user.username} will be permanently deleted`\n                    )}\n                    className=\"delete\"\n                  >\n                    <i className=\"fa fa-trash\"></i>\n                  </div>\n                </div>\n              );\n            })}\n        </div>\n      </aside>\n      <aside className=\"create\">\n        <h1>Create user</h1>\n        <Input state={username} placeholder=\"Username\" />\n        <Input state={password} placeholder=\"Password\" type=\"password\" />\n        <Input\n          state={confirmPassword}\n          placeholder=\"Confirm Password\"\n          type=\"password\"\n        />\n        <div className=\"switch\">\n          <button\n            onClick={() => setIsTeacher(false)}\n            className={cn({ patient: !isTeacher })}\n          >\n            Patient\n          </button>\n          <button\n            onClick={() => setIsTeacher(true)}\n            className={cn({ therapist: isTeacher })}\n          >\n            Therapist\n          </button>\n        </div>\n        <button\n          onClick={handleCreate}\n          className={cn(\"submit\", { therapist: isTeacher })}\n        >\n          Create\n        </button>\n      </aside>\n    </div>\n  );\n}\n\ninterface AdminFeedbackProps {}\n\nfunction AdminFeedback({}: AdminFeedbackProps): ReactElement {\n  const search = useInputState();\n  return (\n    <div className=\"admin-feedback\">\n      <Input\n        state={search}\n        placeholder=\"Search by patient or therapist\"\n        icon={<i style={{ cursor: \"default\" }} className=\"fas fa-search\"></i>}\n      />\n      <div className=\"list\">\n        <div className=\"feedback-card\">\n          <div className=\"top\">\n            <div className=\"name\">\n              <span>Patient:</span> {\"Akhil\"}\n            </div>\n            <div className=\"faculty-name\">\n              <span>Therapist:</span> {\"Akhil\"}\n            </div>\n          </div>\n          <div className=\"message\">\n            Lorem ipsum dolor sit amet consectetur adipisicing elit. Beatae, est\n            voluptatum obcaecati ducimus eligendi quis facilis non praesentium,\n            incidunt vel ratione officia aperiam, sunt quo nam impedit error\n            dolor dignissimos.\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","/home/akhilkala/Desktop/Web/theropy/client/src/components/Input.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useInputState.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useFetch.ts",["95"],"import { useEffect, useState } from \"react\";\nimport { get } from \"../utils/requests\";\n\nconst useFetch = (url: string, lazy = false) => {\n  const [isLoading, setIsLoading] = useState(!lazy);\n  const [error, setError] = useState<any>(null);\n  const [data, setData] = useState<any>(null);\n\n  const fetch = (loading = true) => {\n    setIsLoading(loading);\n    get(url)\n      .then((data: any) => {\n        setData(data);\n        setIsLoading(false);\n      })\n      .catch((err) => {\n        setError(err);\n        setIsLoading(false);\n      });\n  };\n\n  useEffect(() => {\n    if (!lazy) {\n      fetch();\n    }\n  }, []);\n\n  return { isLoading, error, data, fetch };\n};\n\nexport default useFetch;\n","/home/akhilkala/Desktop/Web/theropy/client/src/hooks/useConfirm.ts",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Confirm.tsx",[],"/home/akhilkala/Desktop/Web/theropy/client/src/components/Login.tsx",["96"],{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":2,"column":43,"nodeType":"103","messageId":"104","endLine":2,"endColumn":48},{"ruleId":"97","replacedBy":"105"},{"ruleId":"99","replacedBy":"106"},{"ruleId":"107","severity":1,"message":"108","line":6,"column":33,"nodeType":"109","messageId":"110","endLine":6,"endColumn":42},{"ruleId":"107","severity":1,"message":"108","line":5,"column":30,"nodeType":"109","messageId":"110","endLine":5,"endColumn":39},{"ruleId":"107","severity":1,"message":"108","line":232,"column":24,"nodeType":"109","messageId":"110","endLine":232,"endColumn":46},{"ruleId":"111","severity":1,"message":"112","line":26,"column":6,"nodeType":"113","endLine":26,"endColumn":8,"suggestions":"114"},{"ruleId":"101","severity":1,"message":"115","line":16,"column":9,"nodeType":"103","messageId":"104","endLine":16,"endColumn":13},"no-native-reassign",["116"],"no-negated-in-lhs",["117"],"@typescript-eslint/no-unused-vars","'Route' is defined but never used.","Identifier","unusedVar",["116"],["117"],"no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'fetch' and 'lazy'. Either include them or remove the dependency array.","ArrayExpression",["118"],"'auth' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"119","fix":"120"},"Update the dependencies array to be: [fetch, lazy]",{"range":"121","text":"122"},[610,612],"[fetch, lazy]"]